import re
import smtplib
import configparser
import logging
from tkinter import *

# Set up logging
logging.basicConfig(filename='sms_sender.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load configuration file
config = configparser.ConfigParser()
config.read('config.ini')

# Get SMTP server and port number from configuration file
smtp_server = config['DEFAULT']['SMTP_SERVER']
smtp_port = config['DEFAULT']['SMTP_PORT']

# Set the recipient phone number and carrier domain
recipient_phone_number = ''
carrier_domain = ''

# Validate phone number and carrier domain
def validate_input():
    global recipient_phone_number, carrier_domain

    phone_number = phone_number_entry.get()
    carrier_domain = carrier_domain_entry.get()

    # Validate phone number
    phone_number_pattern = re.compile(r'^\d{10}$')
    if not phone_number_pattern.match(phone_number):
        logging.error('Invalid phone number: ' + phone_number)
        error_label.config(text='Invalid phone number. Must be 10 digits.')
        return

    recipient_phone_number = phone_number

    # Validate carrier domain
    if not carrier_domain:
        logging.error('Carrier domain is empty')
        error_label.config(text='Carrier domain is required.')
        return

    success_label.config(text='Phone number and carrier domain validated successfully.')

# Send the SMS
def send_sms():
    global recipient_phone_number, carrier_domain

    # Get login credentials from configuration file
    sender_email = config['DEFAULT']['SENDER_EMAIL']
    sender_password = config['DEFAULT']['SENDER_PASSWORD']

    # Set the SMS message
    message = message_entry.get()

    # Set the recipient email address by combining the recipient phone number and carrier domain
    recipient_email = recipient_phone_number + '@' + carrier_domain

    # Set the SMTP connection
    try:
        smtp_connection = smtplib.SMTP(smtp_server, smtp_port)
        smtp_connection.starttls()
        smtp_connection.login(sender_email, sender_password)

        # Send the SMS
        smtp_connection.sendmail(sender_email, recipient_email, message)

        # Close the SMTP connection
        smtp_connection.quit()

        success_label.config(text='SMS sent successfully!')
        logging.info('SMS sent to ' + recipient_phone_number)
    except Exception as e:
        logging.error('Error sending SMS: ' + str(e))
        error_label.config(text='Error sending SMS: ' + str(e))

# Create the user interface
root = Tk()
root.title('SMTP2SMS Sender')

# Phone number label and entry
phone_number_label = Label(root, text='Phone Number:')
phone_number_label.grid(row=0, column=0, padx=5, pady=5)

phone_number_entry = Entry(root)
phone_number_entry.grid(row=0, column=1, padx=5, pady=5)

#Carrier domain label and entry
carrier_domain_label = Label(root, text='Carrier Domain:')
carrier_domain_label.grid(row=1, column=0, padx=5, pady=5)

carrier_domain_entry = Entry(root)
carrier_domain_entry.grid(row=1, column=1, padx=5, pady=5)

#Message label and entry
message_label = Label(root, text='Message:')
message_label.grid(row=2, column=0, padx=5, pady=5)

message_entry = Entry(root)
message_entry.grid(row=2, column=1, padx=5, pady=5)

#Validate button
validate_button = Button(root, text='Validate', command=validate_input)
validate_button.grid(row=3, column=0, padx=5, pady=5)

#Send button
send_button = Button(root, text='Send SMS', command=send_sms)
send_button.grid(row=3, column=1, padx=5, pady=5)

#Error label and success label
error_label = Label(root, fg='red')
error_label.grid(row=4, column=0, columnspan=2, padx=5, pady=5)

success_label = Label(root, fg='green')
success_label.grid(row=5, column=0, columnspan=2, padx=5, pady=5)

#Run the user interface
root.mainloop()